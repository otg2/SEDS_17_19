{"paragraphs":[{"text":"%md\n\n### Sequence Consensus\n\nIn this programming assignment you will have to complete the implementation of a Leader-Based Sequence Consensus.\n\nWhen you are done you simply have to export your notebook and then upload it in the \"Programming Exercise 2\" page.\n\n**Things to Remember**:\n1. Basic components such as `FIFOPerfectLink` and `BallotLeaderElection` are already provided. No need to implement them.\n2. Execute the imports defined below **before** compiling your component implementations.\n3. We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.\n4. You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. `println(s\"Process $self delivers message $msg\");`\n5. Remember that during the simulation check you can print and observe the simulation time, i.e. with `System.currentTimeMillis()`.\n5. Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied **before** exporting and submitting the notebook.\n6. You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)\n\nGood luck! :)","user":"anonymous","dateUpdated":"2018-02-14T13:16:11+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Sequence Consensus</h3>\n<p>In this programming assignment you will have to complete the implementation of a Leader-Based Sequence Consensus.</p>\n<p>When you are done you simply have to export your notebook and then upload it in the &ldquo;Programming Exercise 2&rdquo; page.</p>\n<p><strong>Things to Remember</strong>:<br/>1. Basic components such as <code>FIFOPerfectLink</code> and <code>BallotLeaderElection</code> are already provided. No need to implement them.<br/>2. Execute the imports defined below <strong>before</strong> compiling your component implementations.<br/>3. We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.<br/>4. You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. <code>println(s&quot;Process $self delivers message $msg&quot;);</code><br/>5. Remember that during the simulation check you can print and observe the simulation time, i.e. with <code>System.currentTimeMillis()</code>.<br/>5. Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied <strong>before</strong> exporting and submitting the notebook.<br/>6. You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)</p>\n<p>Good luck! :)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1518083325056_-464492669","id":"20160927-134633_1462429338","dateCreated":"2018-02-08T09:48:45+0000","dateStarted":"2018-02-14T13:16:11+0000","dateFinished":"2018-02-14T13:16:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:420"},{"text":"import se.kth.edx.id2203.core.ExercisePrimitives.AddressUtils._\nimport se.kth.edx.id2203.core.ExercisePrimitives.AddressUtils\nimport se.sics.kompics.sl._\nimport se.sics.kompics.network._\nimport se.kth.edx.id2203.core.Ports.{SequenceConsensus, _}\nimport se.sics.kompics.KompicsEvent\nimport se.kth.edx.id2203.validation._\n\nimport scala.collection.mutable;\n","user":"anonymous","dateUpdated":"2018-02-23T14:01:38+0000","config":{"lineNumbers":false,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"import se.kth.edx.id2203.core.ExercisePrimitives.AddressUtils._<br />import se.kth.edx.id2203.core.ExercisePrimitives.AddressUtils<br />import se.sics.kompics.sl._<br />import se.sics.kompics.network._<br />import se.kth.edx.id2203.core.Ports.{SequenceConsensus, _}<br />import se.sics.kompics.KompicsEvent<br />import se.kth.edx.id2203.validation._<br />import scala.collection.mutable<br />"}]},"apps":[],"jobName":"paragraph_1518083325072_-458336687","id":"20160830-154917_187608468","dateCreated":"2018-02-08T09:48:45+0000","dateStarted":"2018-02-23T14:01:38+0000","dateFinished":"2018-02-23T14:01:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:421"},{"text":"%md\n\n\nA Sequence Consensus abstraction, in Kompics terms, is a composite component that **provides** the following port *(already imported in the notebook)*.\n\n    class SequenceConsensus extends Port {\n        request[SC_Propose];\n        indication[SC_Decide];\n    }\n  \nIn your implementation, the **Sequence Consensus** component should indicate with a `SC_Decide` message every value that is appended in the decided sequence (invoked in FIFO order) as well as requesting proposed values through a `SC_Propose` message:\n\n    case class SC_Propose(value: RSM_Command) extends KompicsEvent;\n    case class SC_Decide(value: RSM_Command) extends KompicsEvent;\n    \n    trait RSM_Command\n    \n    \n\nYour sequence consensus component builds on top of a `Ballot Leader Election` component (simulated, no need to provide an implementation). That means that it subscribes to `BLE_Leader(Leader, Ballot)` indications whenever a new leader is elected alongside a maximum ballot. \n\nFurthermore, a `FIFOPerfectLink` abstraction is also provided to send and receive messages in FIFO order between every two processes, using the same messages as the PerfectLink port introduced in Part I (i.e., using `PL_Send(destination, payload)` and `PL_Receive(sender, payload)` messages)  \n\nThe following properties define the expected behavior of a consensus abstraction more specifically:\n\n1. **Validity**: *Every value decided in a sequence has been previously proposed*\n2. **Uniform Agreement**: *For every two sequences decided across different processs, one is a prefix of the other.*\n3. **Completeness**: *Every command proposed by a correct process is eventually included in a decided sequence by every correct process.*\n    \nThe recommended algorithm to use is the the one we call \"Leader-Based Sequence Paxos\" which extends and optimises single value paxos to work with sequences of values.\nYou can find the algorithm in the following  <a href=\"https://courses.edx.org/asset-v1:KTHx+ID2203.2x+2016T4+type@asset+block@sequence-paxos.pdf\" target=\"_blank\">document</a>.\n","user":"anonymous","dateUpdated":"2018-02-14T13:16:25+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>A Sequence Consensus abstraction, in Kompics terms, is a composite component that <strong>provides</strong> the following port <em>(already imported in the notebook)</em>.</p>\n<pre><code>class SequenceConsensus extends Port {\n    request[SC_Propose];\n    indication[SC_Decide];\n}\n</code></pre>\n<p>In your implementation, the <strong>Sequence Consensus</strong> component should indicate with a <code>SC_Decide</code> message every value that is appended in the decided sequence (invoked in FIFO order) as well as requesting proposed values through a <code>SC_Propose</code> message:</p>\n<pre><code>case class SC_Propose(value: RSM_Command) extends KompicsEvent;\ncase class SC_Decide(value: RSM_Command) extends KompicsEvent;\n\ntrait RSM_Command\n</code></pre>\n<p>Your sequence consensus component builds on top of a <code>Ballot Leader Election</code> component (simulated, no need to provide an implementation). That means that it subscribes to <code>BLE_Leader(Leader, Ballot)</code> indications whenever a new leader is elected alongside a maximum ballot. </p>\n<p>Furthermore, a <code>FIFOPerfectLink</code> abstraction is also provided to send and receive messages in FIFO order between every two processes, using the same messages as the PerfectLink port introduced in Part I (i.e., using <code>PL_Send(destination, payload)</code> and <code>PL_Receive(sender, payload)</code> messages) </p>\n<p>The following properties define the expected behavior of a consensus abstraction more specifically:</p>\n<ol>\n  <li><strong>Validity</strong>: <em>Every value decided in a sequence has been previously proposed</em></li>\n  <li><strong>Uniform Agreement</strong>: <em>For every two sequences decided across different processs, one is a prefix of the other.</em></li>\n  <li><strong>Completeness</strong>: <em>Every command proposed by a correct process is eventually included in a decided sequence by every correct process.</em></li>\n</ol>\n<p>The recommended algorithm to use is the the one we call &ldquo;Leader-Based Sequence Paxos&rdquo; which extends and optimises single value paxos to work with sequences of values.<br/>You can find the algorithm in the following <a href=\"https://courses.edx.org/asset-v1:KTHx+ID2203.2x+2016T4+type@asset+block@sequence-paxos.pdf\" target=\"_blank\">document</a>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1518083325073_-458721436","id":"20160930-115754_781424547","dateCreated":"2018-02-08T09:48:45+0000","dateStarted":"2018-02-14T13:16:25+0000","dateFinished":"2018-02-14T13:16:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:422"},{"text":"\n//Provided Primitives to use in your implementation\n\ncase class Prepare(nL: Long, ld: Int, na: Long) extends KompicsEvent;\ncase class Promise(nL: Long, na: Long, suffix: List[RSM_Command], ld: Int) extends KompicsEvent;\ncase class AcceptSync(nL: Long, suffix: List[RSM_Command], ld: Int) extends KompicsEvent;\ncase class Accept(nL: Long, c: RSM_Command) extends KompicsEvent;\ncase class Accepted(nL: Long, m: Int) extends KompicsEvent;\ncase class Decide(ld: Int, nL: Long) extends KompicsEvent;\n\nobject State extends Enumeration {\n    type State = Value;\n    val PREPARE, ACCEPT, UNKOWN = Value;\n}\n\nobject Role extends Enumeration {\n    type Role = Value;\n    val LEADER, FOLLOWER = Value;\n}\n\ndef suffix(s: List[RSM_Command], l: Int): List[RSM_Command] = {\n    s.drop(l)\n}\n\ndef prefix(s: List[RSM_Command], l: Int): List[RSM_Command] = {\n    s.take(l)\n}","user":"anonymous","dateUpdated":"2018-02-23T14:01:44+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"defined class Prepare<br />defined class Promise<br />defined class AcceptSync<br />defined class Accept<br />defined class Accepted<br />defined class Decide<br />defined object State<br />defined object Role<br />suffix: (s: List[se.kth.edx.id2203.core.Ports.RSM_Command], l: Int)List[se.kth.edx.id2203.core.Ports.RSM_Command]<br />prefix: (s: List[se.kth.edx.id2203.core.Ports.RSM_Command], l: Int)List[se.kth.edx.id2203.core.Ports.RSM_Command]<br />"}]},"apps":[],"jobName":"paragraph_1518083325073_-458721436","id":"20160830-154940_1300846994","dateCreated":"2018-02-08T09:48:45+0000","dateStarted":"2018-02-23T14:01:45+0000","dateFinished":"2018-02-23T14:01:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:423"},{"text":"\nclass SequencePaxos(init: Init[SequencePaxos]) extends ComponentDefinition {\n\nimport Role._\nimport State._\n    \n  val sc = provides[SequenceConsensus];\n  val ble = requires[BallotLeaderElection];\n  val pl = requires[FIFOPerfectLink];\n\n  val (self, pi, others) = init match {\n    case Init(addr: Address, pi: Set[Address] @unchecked) => (addr, pi, pi - addr)\n  }\n  val majority = (pi.size / 2) + 1;\n\n  var state = (FOLLOWER, UNKOWN);\n  var nL = 0l;\n  var nProm = 0l;\n  var leader: Option[Address] = None;\n  var na = 0l;\n  var va = List.empty[RSM_Command];\n  var ld = 0;\n  // leader state\n  var propCmds = List.empty[RSM_Command];\n  var las = mutable.Map.empty[Address, Int];\n  var lds = mutable.Map.empty[Address, Int];\n  var lc = 0;\n  var acks = mutable.Map.empty[Address, (Long, List[RSM_Command])];\n\n\n  ble uponEvent {\n    case BLE_Leader(l, n) => handle {\n        /* INSERT YOUR CODE HERE */  \n        if(n>nL){\n            leader=Some(l);\n            nL=n;\n            if(self==l && nL>nProm){\n                state=(LEADER, PREPARE);\n                //println(s\"Process $self becomes leader\");\n                propCmds = List.empty[RSM_Command];\n                las = mutable.Map.empty[Address, Int];\n                lds = mutable.Map.empty[Address, Int];\n                acks = mutable.Map.empty[Address, (Long, List[RSM_Command])];\n                lc=0;\n                for (p<-others){\n                    trigger(PL_Send(p,Prepare(nL, ld, na)) -> pl);\n                    //println(s\"Process $self sends Prepare $nL $ld $na to $p\");\n                }\n                acks(l)=(na,suffix(va,ld));\n                lds(self)=ld;\n                nProm=nL;\n            }\n            else{\n                state=(FOLLOWER,state._2);\n                //println(s\"Process $self becomes follower\");\n            }\n        }\n    }\n   }\n   \n  pl uponEvent {\n    case PL_Deliver(p, Prepare(np, ldp, n)) => handle {\n      /* INSERT YOUR CODE HERE */\n      if(nProm<np){\n          nProm =np;\n          state=(FOLLOWER,PREPARE);\n          //println(s\"Process $self becomes follower prepare\");\n          var sfx=List.empty[RSM_Command];\n          if(na>=n){\n              sfx=suffix(va,ldp);\n          }\n          trigger(PL_Send(p,Promise(np, na, sfx, ld)) -> pl);\n          //println(s\"Process $self sends Promise $np $na $sfx $ld to $p\");\n      }\n    }\n    case PL_Deliver(a, Promise(n, na, sfxa, lda)) => handle {\n      if ((n == nL) && (state == (LEADER, PREPARE))) {\n        /* INSERT YOUR CODE HERE */\n        acks(a)=(na,sfxa);\n        lds(a)=lda;\n        var pro: Set[Address] = pi.filter(acks.contains(_));\n        if (pro.size==majority){\n            var k=0l;\n            var sfx = List.empty[RSM_Command];\n            for ((k1,sfx1)<-acks.values){\n                if(k1>k|| (k1==k && sfx1.size>sfx.size)){\n                    k=k1;\n                    sfx=sfx1;\n                }\n            }\n            va=prefix(va,ld)++sfx++propCmds;\n            las(self)=va.size;\n            propCmds = List.empty[RSM_Command];\n            state=(LEADER, ACCEPT);\n            //println(s\"Process $self becomes leader accept\");\n            for (p<-others){\n                if(lds.contains(p)){\n                    val sfxp=suffix(va,lds(p));\n                    trigger(PL_Send(p,AcceptSync(nL, sfxp, lds(p))) -> pl);\n                    //println(s\"Process $self sends AcceptSync $nL $sfxp $lds(p) to $p\");\n                }\n            }\n        }\n      } else if ((n == nL) && (state == (LEADER, ACCEPT))) {\n        /* INSERT YOUR CODE HERE */\n        lds(a)=lda;\n        val sfxp=suffix(va,lds(a));\n        trigger(PL_Send(a,AcceptSync(nL, sfxp, lds(a))) -> pl);\n        //println(s\"Process $self sends AcceptSync $nL $sfxp $lds(a) to $a\");\n        if(lc!=0){\n            trigger(PL_Send(a,Decide(ld, nL)) -> pl);\n            //println(s\"Process $self sends Decide $ld $nL to $a\");\n        }\n      }\n    }\n    case PL_Deliver(p, AcceptSync(nL, sfx, ldp)) => handle {\n      if ((nProm == nL) && (state == (FOLLOWER, PREPARE))) {\n         /* INSERT YOUR CODE HERE */\n         na=nL;\n         va=prefix(va,ldp)++sfx;\n         trigger(PL_Send(p,Accepted(nL, va.size)) -> pl);\n         //println(s\"Process $self sends Accepted $nL $va.size to $p\");\n         state=(FOLLOWER,ACCEPT);\n         //println(s\"Process $self becomes follower accept\");\n      }\n    }\n    case PL_Deliver(p, Accept(nL, c)) => handle {\n      if ((nProm == nL) && (state == (FOLLOWER, ACCEPT))) {\n         /* INSERT YOUR CODE HERE */\n         va=va:+c;\n         trigger(PL_Send(p,Accepted(nL, va.size)) -> pl);\n         //println(s\"Process $self sends Accepted $nL $va.size to $p\");\n      }\n    }\n    case PL_Deliver(_, Decide(l, nL)) => handle {\n       /* INSERT YOUR CODE HERE */\n       if(nProm == nL){\n           while(ld<l){\n               trigger(SC_Decide(va(ld)) -> sc);\n               //println(s\"Process $self SC_Decide $va(ld)\");\n               ld=ld+1;\n           }\n       }\n    }\n    case PL_Deliver(a, Accepted(n, m)) => handle {\n        //println(s\"Process $self receives Accepted $n $nL $m $state\");\n      if ((n == nL) && (state == (LEADER, ACCEPT))) {\n         /* INSERT YOUR CODE HERE */\n          las(a)=m;\n          var pro = las.filter(t => t._2 >=m);\n          //println(s\"Process $self pro $pro\");\n          if(lc<m && pro.size>=majority){\n              lc=m;\n              for (p<-pi){\n                if(lds.contains(p)){\n                    trigger(PL_Send(p,Decide(lc, nL)) -> pl);\n                    //println(s\"Process $self sends Decide $lc $nL to $p\");\n                }\n            }\n          }\n      }\n      }\n    }\n\n  sc uponEvent {\n    case SC_Propose(c) => handle {\n      if (state == (LEADER, PREPARE)) {\n         /* INSERT YOUR CODE HERE */;\n         propCmds=propCmds:+c;\n         //println(s\"Process $self receives a new command $c\");\n      } \n      else if (state == (LEADER, ACCEPT)) {\n         /* INSERT YOUR CODE HERE */\n         va=va:+c;\n         las(self)=las(self)+1;\n         for (p<-others){\n                if(lds.contains(p)){\n                    trigger(PL_Send(p,Accept(nL, c)) -> pl);\n                    //println(s\"Process $self sends Accept $nL $c to $p\");\n                }\n            }\n      }\n    }\n  }\n}","user":"anonymous","dateUpdated":"2018-02-23T14:01:58+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"defined class SequencePaxos<br />"}]},"apps":[],"jobName":"paragraph_1518083325074_-457567189","id":"20160830-154952_592749615","dateCreated":"2018-02-08T09:48:45+0000","dateStarted":"2018-02-23T14:01:58+0000","dateFinished":"2018-02-23T14:02:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:424"},{"text":"checkSeqConsensus[SequencePaxos]","user":"anonymous","dateUpdated":"2018-02-23T14:02:13+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<br />Your submission has been locally simulated and validated.<br /><br /><a href=\"\\static\\log.txt\" target=\"_blank\">Click Here</a> to view the output of the simulation.<br /><style type=\"text/css\">.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}</style><table class=\"tg\">  <tr>    <th class=\"tg-vlnx\" colspan=\"3\">Correction Results</th>  </tr><br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Validity</td> <td class=\"tg-6k2t\">✔: Every value decided in a sequence has been previously proposed<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Uniform Agreement</td> <td class=\"tg-6k2t\">✔: For every two sequences decided across different processes, one is a prefix of the other<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Completeness-Termination</td> <td class=\"tg-6k2t\">✔: If a command is proposed an infinite number of times by a correct process then it is eventually included at least once in a decided sequence by every correct process<br></td>  </tr>  <br /></table><br />Final Comments<br />**************<br />Congratulations! Your implementation of the 'Sequence Consensus' satisfies all properties! <br />A unique token has been generated for your submission right below. Please do not edit. <br /><br />{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,82,65,65,110,77,81,88,70,50,88,119,105,117,54,83,75,68,75,102,47,54,66,71,97,89,119,69,81,66,89,100,54,50,109,48,76,90,106,70,120,79,89,48,121,78,70,87,10,117,113,48,89,118,50,67,115,110,72,83,97,70,71,53,80,48,85,76,52,101,50,99,67,86,116,84,121,89,116,117,103,48,67,74,114,112,53,82,55,90,80,106,117,102,72,50,101,107,77,70,56,87,99,111,117,86,120,113,67,86,47,51,53,10,72,99,73,115,108,115,71,53,68,114,71,106,51,109,120,100,97,69,49,47,75,88,65,86,105,103,79,108,49,102,121,97,72,56,112,43,51,82,99,83,87,57,65,102,97,83,72,77,88,85,87,98,116,110,84,85,121,109,110,78,70,79,102,74,10,116,53,47,111,121,48,48,70,66,110,78,78,43,113,49,84,116,48,43,119,111,101,118,111,121,86,112,120,69,82,121,115,119,52,117,113,49,65,108,102,55,99,113,77,121,65,90,109,47,47,90,103,68,49,114,68,115,89,97,47,70,52,82,112,10,115,77,47,76,84,50,80,79,106,101,100,120,103,67,115,97,112,86,90,75,122,54,84,65,57,111,78,117,56,89,77,86,54,76,47,102,80,47,65,77,51,69,55,56,84,87,74,74,85,69,115,83,69,77,86,115,80,80,99,102,116,48,114,115,10,52,78,49,47,118,112,121,115,57,103,102,120,68,43,76,47,75,85,52,88,73,49,89,102,99,117,107,103,103,109,82,122,55,98,104,116,84,118,68,99,78,90,68,83,90,75,53,75,100,49,116,72,69,103,53,119,119,81,101,111,97,52,52,82,10,83,65,47,79,119,83,53,84,83,122,83,54,88,65,83,69,90,84,98,101,73,83,52,77,119,72,71,82,103,110,99,83,89,97,116,50,49,48,80,74,114,80,79,105,81,108,47,106,51,81,83,56,104,114,76,73,57,90,69,43,69,70,70,67,10,49,81,83,85,109,105,66,73,119,65,53,71,52,79,56,49,81,105,110,98,114,121,53,78,89,113,102,90,83,72,118,70,52,74,88,115,43,82,84,115,114,120,72,119,89,107,52,74,67,111,57,78,52,65,66,66,67,112,88,57,85,108,108,87,10,106,77,81,104,87,105,67,115,85,76,76,111,72,88,66,56,54,78,49,121,104,74,52,122,90,118,83,72,70,69,52,77,113,116,72,71,81,102,86,110,65,112,121,69,47,86,101,85,84,57,87,113,50,108,52,56,86,110,105,99,85,104,119,118,10,122,103,66,80,113,49,116,103,65,101,89,84,53,66,51,83,66,75,84,122,90,105,75,118,78,117,106,79,115,114,47,112,81,57,53,73,89,85,53,75,76,67,57,109,65,110,86,80,78,55,104,67,70,116,69,111,114,89,98,65,99,67,117,79,10,68,52,114,66,48,106,53,118,47,112,65,49,104,108,77,100,80,68,108,107,109,106,48,43,52,86,55,71,98,86,86,97,107,57,114,119,108,51,105,53,71,50,80,73,83,111,121,97,71,76,47,98,118,119,78,97,97,101,99,65,80,80,110,83,10,119,68,69,66,73,83,117,71,84,79,52,100,77,90,117,86,97,122,75,71,79,119,111,97,97,57,122,73,120,87,111,56,74,86,69,118,71,83,104,115,85,52,90,121,75,116,84,67,75,88,73,110,85,102,81,77,43,65,57,86,110,84,67,75,10,102,75,80,80,121,104,85,85,77,105,79,103,101,65,47,43,77,70,53,85,115,43,80,51,79,68,89,84,56,43,69,79,54,71,118,88,43,75,117,90,48,52,108,112,67,48,110,65,65,69,77,119,87,50,84,79,97,78,100,43,53,117,117,122,10,108,113,109,119,77,53,115,97,103,67,54,104,118,86,74,101,68,110,121,89,90,116,48,84,52,118,70,82,99,55,53,103,84,99,65,50,70,78,43,80,47,48,47,99,73,117,70,79,49,80,76,111,110,54,121,84,68,111,118,98,43,86,68,114,10,109,103,82,100,84,50,68,110,120,43,115,87,53,100,102,83,81,122,57,120,118,48,75,103,75,52,114,107,122,115,54,117,122,112,71,98,79,88,69,77,101,65,109,119,47,97,121,121,48,108,121,80,71,112,78,75,76,105,81,78,57,119,57,82,10,51,100,106,75,120,109,109,112,119,87,112,101,72,48,90,98,84,74,49,70,81,53,108,102,109,104,57,48,113,110,98,75,82,85,97,79,119,111,85,69,72,84,99,54,82,48,101,117,118,86,48,107,48,53,66,89,72,109,81,72,111,89,77,102,10,72,105,67,122,10,61,67,106,102,90,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}<br />res0: Boolean = true<br />"}]},"apps":[],"jobName":"paragraph_1518083325074_-457567189","id":"20160830-155009_392534435","dateCreated":"2018-02-08T09:48:45+0000","dateStarted":"2018-02-23T14:02:13+0000","dateFinished":"2018-02-23T14:02:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:425"},{"dateUpdated":"2018-02-08T09:48:45+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":[],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1518083325074_-457567189","id":"20160830-155043_337959288","dateCreated":"2018-02-08T09:48:45+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:426"}],"name":"Exercise-Sequence Consensus-Solution","id":"2D5XW9F2N","angularObjects":{"2BKQCVH92:shared_process":[],"2CVXXPNWV:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}